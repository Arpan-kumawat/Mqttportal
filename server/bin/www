#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var WebSocket = require('ws');
// DeviceService helpers to manage WS clients and get current data
var DeviceService = require('../services/device/DeviceService');
var addClient = DeviceService.addClient;
var removeClient = DeviceService.removeClient;
var getFormattedData = DeviceService.getFormattedData;

// Attach WebSocket server to the same HTTP server
var wss = new WebSocket.Server({ server });

wss.on('connection', function connection(ws) {
  console.log('WebSocket client connected');
  addClient(ws);

  // Send initial snapshot
  try {
    ws.send(JSON.stringify({ type: 'init', data: getFormattedData() }));
  } catch (e) {
    console.error('Failed to send initial data to WS client:', e.message);
  }

  ws.on('close', function close() {
    console.log('WebSocket client disconnected');
    removeClient(ws);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // CronJobs.scheduleJob();
  console.log("application running on port",addr.port);
}